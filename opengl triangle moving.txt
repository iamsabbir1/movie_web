#include <stdio.h>
#include <GL/glew.h>
#include <GLFW\glfw3.h>
#include <math.h> //do to use cmath
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <GLM/glm.hpp>
#include <GLM\gtc\matrix_transform.hpp>
#include <GLM\gtc\type_ptr.hpp>



GLuint VBO, VAO, Shader, uniformModel;


bool direction = true;
float triOffset = 0.0f;
float triMaxOffset = 0.1f;
float triIncrement = 0.0005f;




//vertex shader
static const char* vShader = "										\n\
#version 330														\n\
layout(location = 0) in vec3 pos;									\n\
																	\n\
uniform mat4 model; 												\n\
void main() 														\n\
{																	\n\
	gl_Position = model * vec4(0.3 * pos.x, 0.3 * pos.y, pos.z, 1.0);		\n\
}";



//fragment shader
static const char* fShader = "										\n\
#version 330														\n\
out vec4 color;														\n\
																	\n\
void main() 														\n\
{																	\n\
	color = vec4(1.0, 0.0, 0.0, 1.0); // red color					\n\
}";



void AddShader(GLuint theProgram, const char* shaderCode, GLenum shaderType)
{
	GLuint theShader = glCreateShader(shaderType);
	
	const GLchar* theCode[1];

	theCode[0] = shaderCode;

	GLint codeLength[1];
	codeLength[0] = strlen(shaderCode);

	glShaderSource(theShader, 1, theCode, codeLength);

	glCompileShader(theShader);

	GLint result = 0;
	GLchar eLog[1024] = { 0 };

	
	glGetShaderiv(theShader, GL_COMPILE_STATUS, &result);

	if (!result)
	{
		glGetShaderInfoLog(theShader, sizeof(eLog), NULL, eLog);
		printf("Error compiling the %d shader: '%s'\n",shaderType, eLog);
		return;
	}

	glAttachShader(theProgram, theShader);
}

void CompileShaders()
{
	Shader = glCreateProgram();


	if (!Shader)
	{
		printf("Error_creating shader program\n");
		return;
	}

	AddShader(Shader, vShader, GL_VERTEX_SHADER);
	AddShader(Shader, fShader, GL_FRAGMENT_SHADER);

	GLint result = 0;
	GLchar eLog[1024] = { 0 };

	glLinkProgram(Shader);
	glGetProgramiv(Shader, GL_LINK_STATUS, &result);

	if (!result)
	{
		glGetProgramInfoLog(Shader, sizeof(eLog), NULL, eLog);
		printf("Error linking program: '%s'\n", eLog);
		return;
	}

	glValidateProgram(Shader);
	glGetProgramiv(Shader, GL_VALIDATE_STATUS, &result);

	if (!result)
	{
		glGetProgramInfoLog(Shader, sizeof(eLog), NULL, eLog);
		printf("Error validating program: '%s'\n", eLog);
		return;
	}



	uniformModel = glGetUniformLocation(Shader, "model");

}

void CreateTriangle()
{
	GLfloat veritices[] = {
		-1.0f, -1.0f, 0.0f,
		1.0f, -1.0f, 0.0f,
		0.0f, 1.0f, 0.0f
	};

	glGenVertexArrays(1, &VAO);


	glBindVertexArray(VAO);

	glGenBuffers(1, &VBO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	glBufferData(GL_ARRAY_BUFFER, sizeof(veritices), veritices, GL_STATIC_DRAW);


	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

	glEnableVertexAttribArray(0);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	
	glBindVertexArray(0);
}





const GLint WIDTH = 800, HEIGHT = 600;

int main(int argc, char** argv)
{
	if (!glfwInit())
	{
		printf("GLFW Initilizaion failed!");
		glfwTerminate();
		return 1;
	}

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);

	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

	GLFWwindow* mainWindow = glfwCreateWindow(WIDTH, HEIGHT, "TEST WINDOW", NULL, NULL);

	if (!mainWindow)
	{
		printf("GLFW window creation is failed");

		glfwTerminate();
		return 1;
	}


	int bufferWidth, bufferHeight;

	glfwGetFramebufferSize(mainWindow, &bufferWidth, &bufferHeight);

	glfwMakeContextCurrent(mainWindow);

	glewExperimental = GL_TRUE;


	if (glewInit() != GLEW_OK)
	{
		printf("glew initilizaion is failed!");
		glfwDestroyWindow(mainWindow);
		glfwTerminate();
		return 1;
	}

	glViewport(0, 0, bufferWidth, bufferHeight);

	CreateTriangle();
	CompileShaders();

	while (!glfwWindowShouldClose(mainWindow))
	{
		glfwPollEvents();

		if (direction)
		{
			triOffset += triIncrement;
		}
		else
		{
			triOffset -= triIncrement;
		}

		if (abs(triOffset) >= triMaxOffset)
		{
			direction = !direction;
		}

		glClearColor(0.0f, 0.0f, 0.0f, 0.9);
		glClear(GL_COLOR_BUFFER_BIT);

		glUseProgram(Shader);

		glm::mat4 model;
		model = glm::translate(model, glm::vec3(triOffset, 0.0f, 0.0f));


		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));


		glBindVertexArray(VAO);
		
		glDrawArrays(GL_TRIANGLES, 0, 3);

		glBindVertexArray(0);

		glUseProgram(0);

		glfwSwapBuffers(mainWindow);
	}

	return 0;
}